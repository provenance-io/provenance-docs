"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6297],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),d=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(n),f=i,h=p["".concat(c,".").concat(f)]||p[f]||u[f]||a;return n?r.createElement(h,o(o({ref:t},l),{},{components:n})):r.createElement(h,o({ref:t},l))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var d=2;d<a;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4314:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var r=n(7462),i=(n(7294),n(3905));const a={},o="Index Engine",s={unversionedId:"pb/p8e/overview/api/index-engine",id:"pb/p8e/overview/api/index-engine",title:"Index Engine",description:"When transactions are successfully memorialized on the blockchain, the Event Stream emits block events. The Index Engine is responsible for listening for and consuming these events. Using information contained in these events, the engine queries the object store to retrieve asset data. The transaction structure is defined using a Protobuf, which includes previously identified data fields that are required to be indexed for future use. The indexable fields are extracted and saved to the index data store. Once saved, the index engine submits a message to the Provenance Blockchain mailbox. Affiliates participating in the transaction can pick up these messages for insight to transaction statuses. The index data store facilitates querying information from the affiliate\u2019s Encrypted Object Store and also the blockchain.",source:"@site/docs/pb/p8e/overview/api/index-engine.md",sourceDirName:"pb/p8e/overview/api",slug:"/pb/p8e/overview/api/index-engine",permalink:"/docs/pb/p8e/overview/api/index-engine",draft:!1,tags:[],version:"current",frontMatter:{}},c={},d=[],l={toc:d};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"index-engine"},"Index Engine"),(0,i.kt)("p",null,"When transactions are successfully memorialized on the blockchain, the Event Stream emits block events. The Index Engine is responsible for listening for and consuming these events. Using information contained in these events, the engine queries the object store to retrieve asset data. The transaction structure is defined using a Protobuf, which includes previously identified data fields that are required to be indexed for future use. The indexable fields are extracted and saved to the index data store. Once saved, the index engine submits a message to the Provenance Blockchain mailbox. Affiliates participating in the transaction can pick up these messages for insight to transaction statuses. The index data store facilitates querying information from the affiliate\u2019s Encrypted Object Store and also the blockchain."))}u.isMDXComponent=!0}}]);