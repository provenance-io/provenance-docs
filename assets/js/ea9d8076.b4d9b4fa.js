"use strict";(self.webpackChunkprovenance_docs=self.webpackChunkprovenance_docs||[]).push([[969],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(i,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(h,s(s({ref:t},l),{},{components:n})):a.createElement(h,s({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=u;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9036:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={},s="Data Retrieval",c={unversionedId:"pb/p8e/p8e-usage/data-retrieval",id:"pb/p8e/p8e-usage/data-retrieval",title:"Data Retrieval",description:"As previously mentioned, executed contracts will have their resulting hashes saved to EOS, and resulting scopes memorialized to Provenance Blockchain. The mechanism used to convert Provenance Blockchain scopes into their original data is referred to hydration within the SDK. This process is straightforward, it parses the protobuf datatypes and hashes from the Provenance Blockchain scope and pulls the objects associated with those hashes from EOS. Assuming they have the correct permission to pull and decrypt those objects, the raw bytes can be converted into their associated datatype and returned.",source:"@site/docs/pb/p8e/p8e-usage/data-retrieval.md",sourceDirName:"pb/p8e/p8e-usage",slug:"/pb/p8e/p8e-usage/data-retrieval",permalink:"/provenance-docs/docs/pb/p8e/p8e-usage/data-retrieval",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Building New P8e Contracts",permalink:"/provenance-docs/docs/pb/p8e/p8e-usage/building-new-contracts"},next:{title:"Cross Scope (Update) Contract",permalink:"/provenance-docs/docs/pb/p8e/p8e-usage/cross-scope-contract-example"}},i={},p=[],l={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data-retrieval"},"Data Retrieval"),(0,r.kt)("p",null,"As previously mentioned, executed contracts will have their resulting hashes saved to EOS, and resulting scopes memorialized to Provenance Blockchain. The mechanism used to convert Provenance Blockchain scopes into their original data is referred to hydration within the SDK. This process is straightforward, it parses the protobuf datatypes and hashes from the Provenance Blockchain scope and pulls the objects associated with those hashes from EOS. Assuming they have the correct permission to pull and decrypt those objects, the raw bytes can be converted into their associated datatype and returned."),(0,r.kt)("p",null,"A subset of a Provenance Blockchain scope is provided to show the relationship between EOS and Provenance Blockchain."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'records:\n- record:\n    inputs:\n    - hash: s+siKv96ekn8y22I79zjWHIfJRmnZFC18q1rZ0vgvhM=\n      name: name\n      status: RECORD_INPUT_STATUS_PROPOSED\n      type_name: io.p8e.proto.example.HelloWorldExample$ExampleName\n    name: name\n    outputs:\n    - hash: vpb21hMS23JTPYqtW9BN3c5/DT1Z4bgRLFJFTnRQAc0=\n      status: RESULT_STATUS_PASS\n    process:\n      hash: Qc2bHdrg+3LxlItTZSbzhJnUn5Btha0LCXaiSk34Hhk=\n      method: name\n      name: io.p8e.proto.example.HelloWorldExample$ExampleName\n    session_id: session1q8dkpadudgr5fq5zaejt8c2w44l4s23wjztxqjg63qkfq7kzu7glzyuppf2\n    specification_id: recspec1qhvwfpz7d96gwrahg6qfdhx4kssg9g6n0lcdhnn7as6ad8ku8gvfu526tn4\nscope:\n  scope:\n    data_access: []\n    owners:\n    - address: tp1vz99nyd2er8myeugsr4xm5duwhulhp5arsr9wt\n      role: PARTY_TYPE_OWNER\n    scope_id: scope1qrdkpadudgr5fq5zaejt8c2w44ls30k6p6\n    specification_id: scopespec1qjkyp28sldx5r9ueaxqc5adrc5wszy6nsh\n    value_owner_address: ""\nsessions:\n- contract_spec_id_info:\n    contract_spec_addr: contractspec1q0vwfpz7d96gwrahg6qfdhx4kssq7kz46e\n    contract_spec_id: contractspec1q0vwfpz7d96gwrahg6qfdhx4kssq7kz46e\n    contract_spec_uuid: d8e4845e-6974-870f-b746-8096dcd5b420\n  session:\n    audit:\n      created_by: tp1vz99nyd2er8myeugsr4xm5duwhulhp5arsr9wt\n      created_date: "2021-09-10T17:29:48.987310700Z"\n      message: ""\n      updated_by: ""\n      updated_date: "0001-01-01T00:00:00Z"\n      version: 1\n    context: null\n    name: io.p8e.contracts.examplekotlin.HelloWorldContract\n    parties:\n    - address: tp1vz99nyd2er8myeugsr4xm5duwhulhp5arsr9wt\n      role: PARTY_TYPE_OWNER\n    session_id: session1q8dkpadudgr5fq5zaejt8c2w44l4s23wjztxqjg63qkfq7kzu7glzyuppf2\n    specification_id: contractspec1q0vwfpz7d96gwrahg6qfdhx4kssq7kz46e\n')),(0,r.kt)("p",null,"The associated contract that would produce such a scope."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Participants(roles = [OWNER])\n@ScopeSpecification(names = ["io.p8e.contracts.examplekotlin.helloWorld"])\nopen class HelloWorldContract(): P8eContract() {\n    @Function(invokedBy = OWNER)\n    @Record(name = "name")\n    open fun name(@Input(name = "name") name: ExampleName) =\n        name.toBuilder()\n            .setFirstName(name.firstName.plus("-hello"))\n            .setLastName(name.lastName.plus("-world"))\n            .build()\n}\n\n@ScopeSpecificationDefinition(\n    uuid = "<UUID>",\n    name = "io.p8e.contracts.examplekotlin.helloWorld",\n    description = "A generic scope that allows for a lot of example hello world contracts.",\n    partiesInvolved = [OWNER],\n)\nopen class HelloWorldScopeSpecification() : P8eScopeSpecification()\n')),(0,r.kt)("p",null,"Lastly, the associated protobuf definition."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'option java_package = "io.p8e.proto.example";\noption java_outer_classname = "HelloWorldExample";\n\nmessage ExampleName {\n    string first_name = 1;\n    string last_name = 2;\n    string middle_name = 3;\n    string prefix = 4;\n    string suffix = 5;\n}\n')))}d.isMDXComponent=!0}}]);