"use strict";(self.webpackChunkprovenance_blockchain_developer_portal=self.webpackChunkprovenance_blockchain_developer_portal||[]).push([[8623],{82593:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>f,frontMatter:()=>d,metadata:()=>t,toc:()=>i});var r=a(74848),s=a(28453);const d={},o="State",t={id:"sdk/name/state",title:"State",description:"The name module holds a very simple state collection.",source:"@site/docs/sdk/name/02_state.md",sourceDirName:"sdk/name",slug:"/sdk/name/state",permalink:"/docs/sdk/name/state",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Concepts",permalink:"/docs/sdk/name/concepts"},next:{title:"Messages",permalink:"/docs/sdk/name/messages"}},c={},i=[{value:"Name Record KV Values",id:"name-record-kv-values",level:2},{value:"Address Record KV Index",id:"address-record-kv-index",level:2},{value:"Name Record",id:"name-record",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"state",children:"State"}),"\n",(0,r.jsx)(n.p,{children:"The name module holds a very simple state collection."}),"\n",(0,r.jsx)(n.h2,{id:"name-record-kv-values",children:"Name Record KV Values"}),"\n",(0,r.jsx)(n.p,{children:"Name records are stored using a key based upon a concatenated\nlist of hashes based on each label within the name.  This approach allows all of the names in the tree under a given\nname to be quickly queried and iterated over."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Name: foo\nkey = 2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae\n\nName: foo.bar\nkey = 2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae.fcde2b2edba56bf408601fb721fe9b5c338d10ee429ea04fae5511b68fbf8fb9\n\nName:  foo.bar.baz\nkey = 2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae.fcde2b2edba56bf408601fb721fe9b5c338d10ee429ea04fae5511b68fbf8fb9.baa5a0964d3320fbc0c6a922140453c8513ea24ab8fd0577034804a967248096\n\n"})}),"\n",(0,r.jsx)(n.h2,{id:"address-record-kv-index",children:"Address Record KV Index"}),"\n",(0,r.jsx)(n.p,{children:"In addition to the records stored by name an address cache is maintained for the addresses associated with each name\nrecord.  This allows simple and fast reverse lookup queries to be performed."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Address: pb1tg3ktger9ttlscehl3r5j4pqw7qzmvs4qr9vpm\nkey = 5A2365A3232AD7F86337FC4749542077802DB215.2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae.fcde2b2edba56bf408601fb721fe9b5c338d10ee429ea04fae5511b68fbf8fb9\nvalue = foo.bar\n"})}),"\n",(0,r.jsx)(n.h2,{id:"name-record",children:"Name Record"}),"\n",(0,r.jsx)(n.p,{children:"Name records are encoded using the following protobuf type"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"// NameRecord is a structure used to bind ownership of a name heirarchy to a collection of addresses\nmessage NameRecord {\n  option (gogoproto.goproto_stringer) = false;\n\n  // The bound name\n  string name = 1;\n  // The address the name resolved to.\n  string address = 2;\n  // Whether owner signature is required to add sub-names.\n  bool restricted = 3;\n}\n"})})]})}function f(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>t});var r=a(96540);const s={},d=r.createContext(s);function o(e){const n=r.useContext(d);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(d.Provider,{value:n},e.children)}}}]);