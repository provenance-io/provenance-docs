"use strict";(self.webpackChunkprovenance_blockchain_developer_portal=self.webpackChunkprovenance_blockchain_developer_portal||[]).push([[5716],{22489:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>s,default:()=>b,frontMatter:()=>a,metadata:()=>u,toc:()=>d});var r=n(74848),i=n(28453);const a={},s="State",u={id:"sdk/attribute/state",title:"State",description:"The attribute module inserts all attributes into a basic state store.",source:"@site/docs/sdk/attribute/01_state.md",sourceDirName:"sdk/attribute",slug:"/sdk/attribute/state",permalink:"/docs/sdk/attribute/state",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"x/attribute",permalink:"/docs/sdk/attribute/"},next:{title:"Messages",permalink:"/docs/sdk/attribute/messages"}},o={},d=[{value:"Attribute KV-Store",id:"attribute-kv-store",level:2},{value:"Key layout",id:"key-layout",level:3},{value:"Attribute Record",id:"attribute-record",level:3},{value:"Attribute Type",id:"attribute-type",level:3}];function l(t){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"state",children:"State"}),"\n",(0,r.jsx)(e.p,{children:"The attribute module inserts all attributes into a basic state store."}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#attribute-kv-store",children:"Attribute KV-Store"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#key-layout",children:"Key layout"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#attribute-record",children:"Attribute Record"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#attribute-type",children:"Attribute Type"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"attribute-kv-store",children:"Attribute KV-Store"}),"\n",(0,r.jsx)(e.p,{children:"The attribute module takes in an attribute supplied by the user and generates a key for it. This key is generated\nby combinining the attribute prefix, address, attribute name, and a hashed value of the attribute value. This\ncan then be used to either store a marshalled attribute record, or retrieve the value it points to in the store."}),"\n",(0,r.jsx)(e.h3,{id:"key-layout",children:"Key layout"}),"\n",(0,r.jsx)(e.p,{children:"[0x02][address][attribute name][hashvalue]"}),"\n",(0,r.jsx)(e.h3,{id:"attribute-record",children:"Attribute Record"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'// Attribute holds a typed key/value structure for data associated with an account\ntype Attribute struct {\n\t// The attribute name.\n\tName string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`\n\n\t// The attribute value.\n\tValue []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`\n\n\t// The attribute value type.\n\tAttributeType AttributeType `protobuf:"varint,3,opt,name=attribute_type,json=attributeType,proto3,enum=provenance.attribute.v1.AttributeType" json:"attribute_type,omitempty"`\n\n\t// The address the attribute is bound to\n\tAddress string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"attribute-type",children:"Attribute Type"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"// AttributeType defines the type of the data stored in the attribute value\ntype AttributeType int32\n\nconst (\n\t// ATTRIBUTE_TYPE_UNSPECIFIED defines an unknown/invalid type\n\tAttributeType_Unspecified AttributeType = 0\n\t// ATTRIBUTE_TYPE_UUID defines an attribute value that contains a string value representation of a V4 uuid\n\tAttributeType_UUID AttributeType = 1\n\t// ATTRIBUTE_TYPE_JSON defines an attribute value that contains a byte string containing json data\n\tAttributeType_JSON AttributeType = 2\n\t// ATTRIBUTE_TYPE_STRING defines an attribute value that contains a generic string value\n\tAttributeType_String AttributeType = 3\n\t// ATTRIBUTE_TYPE_URI defines an attribute value that contains a URI\n\tAttributeType_Uri AttributeType = 4\n\t// ATTRIBUTE_TYPE_INT defines an attribute value that contains an integer (cast as int64)\n\tAttributeType_Int AttributeType = 5\n\t// ATTRIBUTE_TYPE_FLOAT defines an attribute value that contains a float\n\tAttributeType_Float AttributeType = 6\n\t// ATTRIBUTE_TYPE_PROTO defines an attribute value that contains a serialized proto value in bytes\n\tAttributeType_Proto AttributeType = 7\n\t// ATTRIBUTE_TYPE_BYTES defines an attribute value that contains an untyped array of bytes\n\tAttributeType_Bytes AttributeType = 8\n)\n"})})]})}function b(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(l,{...t})}):l(t)}},28453:(t,e,n)=>{n.d(e,{R:()=>s,x:()=>u});var r=n(96540);const i={},a=r.createContext(i);function s(t){const e=r.useContext(a);return r.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function u(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:s(t.components),r.createElement(a.Provider,{value:e},t.children)}}}]);