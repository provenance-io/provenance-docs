"use strict";(self.webpackChunkprovenance_docs=self.webpackChunkprovenance_docs||[]).push([[5757],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>b});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},l=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),l=d(t),b=o,g=l["".concat(s,".").concat(b)]||l[b]||u[b]||a;return t?r.createElement(g,c(c({ref:n},p),{},{components:t})):r.createElement(g,c({ref:n},p))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=l;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var d=2;d<a;d++)c[d]=t[d];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}l.displayName="MDXCreateElement"},8677:(e,n,t)=>{t.d(n,{Y:()=>o});var r=t(7294);const o=e=>{let{text:n}=e;return r.createElement("p",{className:"pb-5 mb-5 -mt-3 border-0 border-b border-b-gray-300 border-solid text-gray-500"},n)}},6843:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>c,metadata:()=>s,toc:()=>p});var r=t(7462),o=(t(7294),t(3905)),a=t(8677);const c={},i="Running a testnet node from quicksync",s={unversionedId:"pb/blockchain/running-a-node/running-a-node-1/join-provenance-testnet/running-a-testnet-node-from-quicksync",id:"pb/blockchain/running-a-node/running-a-node-1/join-provenance-testnet/running-a-testnet-node-from-quicksync",title:"Running a testnet node from quicksync",description:"The steps for running testnet are exactly the same as mainnet except that the github repo is here https://github.com/provenance-io/testnet and the chain id is pio-testnet-1",source:"@site/docs/pb/blockchain/running-a-node/running-a-node-1/join-provenance-testnet/running-a-testnet-node-from-quicksync.md",sourceDirName:"pb/blockchain/running-a-node/running-a-node-1/join-provenance-testnet",slug:"/pb/blockchain/running-a-node/running-a-node-1/join-provenance-testnet/running-a-testnet-node-from-quicksync",permalink:"/provenance-docs/docs/pb/blockchain/running-a-node/running-a-node-1/join-provenance-testnet/running-a-testnet-node-from-quicksync",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Joining Testnet",permalink:"/provenance-docs/docs/pb/blockchain/running-a-node/running-a-node-1/join-provenance-testnet/"},next:{title:"Become a Validator",permalink:"/provenance-docs/docs/pb/blockchain/running-a-node/running-a-node-1/become-a-validator"}},d={},p=[],u={toc:p};function l(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"running-a-testnet-node-from-quicksync"},"Running a testnet node from quicksync"),(0,o.kt)(a.Y,{text:"Running a testnet node for pio-testnet-1 from a quicksync file.",mdxType:"DocSubheader"}),(0,o.kt)("p",null,"The steps for running testnet are exactly the same as mainnet except that the github repo is here ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/provenance-io/testnet"},"https://github.com/provenance-io/testnet")," and the chain id is ",(0,o.kt)("inlineCode",{parentName:"p"},"pio-testnet-1")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markup"},"Step 1:download the latest quickysync via https://test.provenance.io/quicksync.\nAlso Also note there is much smaller download available here `https://tools.highstakes.ch/provenance_snapshot` which is [referable to use to get started and also works the same as quicksync download.\nStep 2:Note down the provenance version required for the quicksync file downloaded in step 1.\nStep 3:Download appropriate release from https://github.com/provenance-io/provenance/releases/ noted from step 2.\nStep 4:Untar data directory from the quicksync download and replacing the untarred data directory to $PIO_HOME/data\nStep 5: Run the below commands\nexport PIO_HOME=~/.provenanced // or directory of your choosing.\nprovenanced init choose-a-moniker --chain-id pio-testnet-1\ncurl https://raw.githubusercontent.com/provenance-io/testnet/main/pio-testnet-1/genesis.json> genesis.json\nmv genesis.json $PIO_HOME/config\nStep 4:Change config.toml to have the db-backend set to `cleveldb`\n```# Database backend: goleveldb | cleveldb | boltdb | rocksdb | badgerdb\n# * goleveldb (github.com/syndtr/goleveldb - most popular implementation)\n#   - pure go\n#   - stable\n# * cleveldb (uses levigo wrapper)\n#   - fast\n#   - requires gcc\n#   - use cleveldb build tag (go build -tags cleveldb)\n# * boltdb (uses etcd's fork of bolt - github.com/etcd-io/bbolt)\n#   - EXPERIMENTAL\n#   - may be faster is some use-cases (random reads - indexer)\n#   - use boltdb build tag (go build -tags boltdb)\n# * rocksdb (uses github.com/tecbot/gorocksdb)\n#   - EXPERIMENTAL\n#   - requires gcc\n#   - use rocksdb build tag (go build -tags rocksdb)\n# * badgerdb (uses github.com/dgraph-io/badger)\n#   - EXPERIMENTAL\n#   - use badgerdb build tag (go build -tags badgerdb)\ndb_backend = \"cleveldb```\nStep 6: provenanced start --testnet --p2p.seeds 2de841ce706e9b8cdff9af4f137e52a4de0a85b2@104.196.26.176:26656,add1d50d00c8ff79a6f7b9873cc0d9d20622614e@34.71.242.51:26656 --x-crisis-skip-assert-invariants\n")))}l.isMDXComponent=!0}}]);