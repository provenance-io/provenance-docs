"use strict";(self.webpackChunkprovenance_blockchain_developer_portal=self.webpackChunkprovenance_blockchain_developer_portal||[]).push([[1916],{6149:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var i=t(5893),r=t(1151),a=t(8677);const o={},s="405 - Smart Contract Lifecycle and Version Transition",c={id:"pb/contributing/adr/smart-contracts/upgrading",title:"405 - Smart Contract Lifecycle and Version Transition",description:"1. Lifecycle of a Smart Contract",source:"@site/docs/pb/contributing/adr/400-smart-contracts/405-upgrading.mdx",sourceDirName:"pb/contributing/adr/400-smart-contracts",slug:"/pb/contributing/adr/smart-contracts/upgrading",permalink:"/docs/pb/contributing/adr/smart-contracts/upgrading",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:405,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"404 - Omnibus",permalink:"/docs/pb/contributing/adr/smart-contracts/omnibus"},next:{title:"500 Administration",permalink:"/docs/pb/contributing/adr/administration"}},d={},l=[{value:"1. Lifecycle of a Smart Contract",id:"1-lifecycle-of-a-smart-contract",level:2},{value:"Deployment Plan",id:"deployment-plan",level:3},{value:"Version Transition (v1 to v2)",id:"version-transition-v1-to-v2",level:3},{value:"2. Migration and User Transition Strategies",id:"2-migration-and-user-transition-strategies",level:2},{value:"Developer&#39;s Responsibility",id:"developers-responsibility",level:3},{value:"Communication and Deprecation",id:"communication-and-deprecation",level:3},{value:"3. Data Handling and Integrity",id:"3-data-handling-and-integrity",level:2},{value:"Data Maintenance and Migration",id:"data-maintenance-and-migration",level:3},{value:"4. Risks and Challenges",id:"4-risks-and-challenges",level:2},{value:"5. Additional Notes",id:"5-additional-notes",level:2}];function h(e){const n={h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"405---smart-contract-lifecycle-and-version-transition",children:"405 - Smart Contract Lifecycle and Version Transition"}),"\n","\n","\n",(0,i.jsx)(a.Y,{text:"The typical lifecycle of a smart contract within the ecosystem, focusing on the transition process from version 1 (v1) to version 2 (v2), and the procedures and policies associated with this process."}),"\n",(0,i.jsx)(n.h2,{id:"1-lifecycle-of-a-smart-contract",children:"1. Lifecycle of a Smart Contract"}),"\n",(0,i.jsx)(n.h3,{id:"deployment-plan",children:"Deployment Plan"}),"\n",(0,i.jsx)(n.p,{children:"The deployment of a smart contract typically follows these steps:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Build and Compile:"})," The initial step where the contract is built and compiled."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Store/Deploy Contract:"})," The contract is then stored/deployed to the Provenance blockchain network. This process involves submitting a governance proposal that includes the encoded WebAssembly (WASM) and metadata about the contract such as notes, repository links, and admin details. A unique code id, used to reference the stored code, is created if the proposal is passed."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Instantiate Contract:"})," Using the obtained code ID, the contract is instantiated."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Execute/Invoke Contract:"})," The contract is then ready for execution or invocation."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Development of New Features:"})," New features for the contract are coded."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Store/Deploy Updated Contract:"})," The updated contract code is stored/deployed, again through a governance proposal, which returns a new code ID."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Migrate Existing Contract:"})," The existing contract is migrated to the new code ID, effectively upgrading the contract."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"version-transition-v1-to-v2",children:"Version Transition (v1 to v2)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Upon upgrading, the contract address remains the same but runs the migrated (new) code."}),"\n",(0,i.jsx)(n.li,{children:"The v1 version of the contract is no longer active and cannot be interacted with; the v1 instance effectively becomes the v2 version."}),"\n"]}),"\n",(0,i.jsxs)("p",{className:"p-4 bg-sky-100 rounded-lg shadow-md max-w-xl m-auto",children:[(0,i.jsx)("span",{className:"font-bold block text-xl border-0 border-b border-sky-200 pb-1 mb-1 border-solid",children:(0,i.jsx)(n.p,{children:"Note"})}),(0,i.jsx)(n.p,{children:"The v1 code remains stored and could be instantiated with its code ID, but the\nspecific migrated instance permanently changes to run the new version."})]}),"\n",(0,i.jsx)(n.h2,{id:"2-migration-and-user-transition-strategies",children:"2. Migration and User Transition Strategies"}),"\n",(0,i.jsx)(n.h3,{id:"developers-responsibility",children:"Developer's Responsibility"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Developers are responsible for ensuring successful migration. This typically involves proper deprecation of APIs, storing version data in the contract, and migrating stored data."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"communication-and-deprecation",children:"Communication and Deprecation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"There is no standard deprecation policy. Communication about upgrades and changes is typically done out-of-band by the developers to their clients."}),"\n",(0,i.jsx)(n.li,{children:"A proper deprecation process involves maintaining the previous version API along with the new API, allowing older clients to update their code in parallel with the new version."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"3-data-handling-and-integrity",children:"3. Data Handling and Integrity"}),"\n",(0,i.jsx)(n.h3,{id:"data-maintenance-and-migration",children:"Data Maintenance and Migration"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'The duration for which data is stored depends on the contract\'s function. A "skeleton" contract upgrade can be used to delete stored data and remove admin access, essentially sunsetting the older contract.'}),"\n",(0,i.jsx)(n.li,{children:"It's crucial to maintain data integrity during migration, and in cases of corruption, recovery from previous blocks might be possible, though this is not a standard practice and has not been widely performed."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"4-risks-and-challenges",children:"4. Risks and Challenges"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Bad upgrades, such as those with flawed data migration logic or broken functions, require the updated contract code to be uploaded and migrated to."}),"\n",(0,i.jsx)(n.li,{children:"In case of migration failure due to errors, the transaction fails and no changes are made. However, issues arising from bad programming logic (not actual transaction errors) are permanent and require subsequent fixes."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"5-additional-notes",children:"5. Additional Notes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Once a contract is updated from v1 to v2, v2 takes over and v1 can no longer be called."}),"\n",(0,i.jsx)(n.li,{children:"The process of migration updates the version state data, indicating the transition from v1 to v2."}),"\n",(0,i.jsx)(n.li,{children:"It's important to note that once migrated, there is no reversing to the previous version. Any necessary corrections must be addressed by moving forward with new updates and migrations."}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8677:(e,n,t)=>{t.d(n,{Y:()=>r});t(7294);var i=t(5893);const r=e=>{let{text:n}=e;return(0,i.jsx)("p",{className:"pb-5 mb-5 -mt-3 border-0 border-b border-b-gray-300 border-solid text-gray-500",children:n})}},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>o});var i=t(7294);const r={},a=i.createContext(r);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);