"use strict";(self.webpackChunkprovenance_blockchain_developer_portal=self.webpackChunkprovenance_blockchain_developer_portal||[]).push([[1345],{49538:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var t=n(74848),o=n(28453);const r={},a="Messages",i={id:"sdk/name/messages",title:"Messages",description:"In this section we describe the processing of the staking messages and the corresponding updates to the state.",source:"@site/docs/sdk/name/03_messages.md",sourceDirName:"sdk/name",slug:"/sdk/name/messages",permalink:"/docs/sdk/name/messages",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"State",permalink:"/docs/sdk/name/state"},next:{title:"Events",permalink:"/docs/sdk/name/events"}},d={},l=[{value:"MsgBindNameRequest",id:"msgbindnamerequest",level:2},{value:"MsgDeleteNameRequest",id:"msgdeletenamerequest",level:2},{value:"MsgModifyNameRequest",id:"msgmodifynamerequest",level:2},{value:"CreateRootNameProposal",id:"createrootnameproposal",level:2},{value:"MsgCreateRootNameRequest",id:"msgcreaterootnamerequest",level:2}];function c(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"messages",children:"Messages"})}),"\n",(0,t.jsx)(s.p,{children:"In this section we describe the processing of the staking messages and the corresponding updates to the state."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"#msgbindnamerequest",children:"MsgBindNameRequest"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"#msgdeletenamerequest",children:"MsgDeleteNameRequest"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"#msgmodifynamerequest",children:"MsgModifyNameRequest"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"#createrootnameproposal",children:"CreateRootNameProposal"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"#msgcreaterootnamerequest",children:"MsgCreateRootNameRequest"})}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"msgbindnamerequest",children:"MsgBindNameRequest"}),"\n",(0,t.jsxs)(s.p,{children:["A name record is created using the ",(0,t.jsx)(s.code,{children:"MsgBindNameRequest"})," message."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-proto",children:"message MsgBindNameRequest {\n  option (gogoproto.equal)           = false;\n  option (gogoproto.goproto_getters) = false;\n\n  // The parent record to bind this name under.\n  NameRecord parent = 1 [(gogoproto.nullable) = false];\n  // The name record to bind under the parent\n  NameRecord record = 2 [(gogoproto.nullable) = false];\n}\n"})}),"\n",(0,t.jsx)(s.p,{children:"This message is expected to fail if:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"The parent name record does not exist"}),"\n",(0,t.jsxs)(s.li,{children:["The requestor does not match the owner listed on the parent record ",(0,t.jsx)(s.em,{children:"and"})," the parent record indicates creation of child records is restricted."]}),"\n",(0,t.jsxs)(s.li,{children:["The record being created is otherwise invalid due to format or contents of the name value itself","\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Insuffient length of name"}),"\n",(0,t.jsx)(s.li,{children:"Excessive length of name"}),"\n",(0,t.jsx)(s.li,{children:"Not deriving from the parent record (targets another root)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"If successful a name record will be created as described and an address index record will be created for the address associated with the name."}),"\n",(0,t.jsx)(s.h2,{id:"msgdeletenamerequest",children:"MsgDeleteNameRequest"}),"\n",(0,t.jsx)(s.p,{children:"The delete name request method allows a name record that does not contain any children records to be removed from the system.  All\nassociated attributes on account addresses will be deleted."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-proto",children:"// MsgDeleteNameRequest defines an sdk.Msg type that is used to remove an existing address/name binding.  The binding\n// may not have any child names currently bound for this request to be successful. All associated attributes on account addresses will be deleted.\nmessage MsgDeleteNameRequest {\n  option (gogoproto.equal)           = false;\n  option (gogoproto.goproto_getters) = false;\n\n  // The parent record the record to remove is under.\n  NameRecord parent = 1 [(gogoproto.nullable) = false];\n  // The record being removed\n  NameRecord record = 2 [(gogoproto.nullable) = false];\n}\n"})}),"\n",(0,t.jsx)(s.p,{children:"This message is expected to fail if:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Any components of the request do not pass basic integrity and format checks"}),"\n",(0,t.jsx)(s.li,{children:"The parent name record does not exist"}),"\n",(0,t.jsx)(s.li,{children:"The record to remove does not exist"}),"\n",(0,t.jsx)(s.li,{children:"Any child records exist under the record being removed"}),"\n",(0,t.jsx)(s.li,{children:"The requestor does not match the owner listed on the record."}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"msgmodifynamerequest",children:"MsgModifyNameRequest"}),"\n",(0,t.jsxs)(s.p,{children:["A name record is modified by proposing the ",(0,t.jsx)(s.code,{children:"MsgModifyNameRequest"})," message."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-proto",children:'// MsgModifyNameRequest defines a method that is used to update an existing address/name binding.\nmessage MsgModifyNameRequest {\n  option (cosmos.msg.v1.signer) = "authority";\n\n  // The address signing the message\n  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];\n  // The record being updated\n  NameRecord record = 2 [(gogoproto.nullable) = false];\n}\n'})}),"\n",(0,t.jsx)(s.p,{children:"This message is expected to fail if:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Any components of the request do not pass basic integrity and format checks"}),"\n",(0,t.jsx)(s.li,{children:"The record to update does not exist"}),"\n",(0,t.jsx)(s.li,{children:"The authority does not match the gov module or the name owner."}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"If successful a name record will be updated with the new address and restriction."}),"\n",(0,t.jsx)(s.h2,{id:"createrootnameproposal",children:"CreateRootNameProposal"}),"\n",(0,t.jsx)(s.p,{children:"The create root name proposal is a governance proposal that allows new root level names to be established after the genesis of the blockchain."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-proto",children:"message CreateRootNameProposal {\n  option (gogoproto.equal)            = false;\n  option (gogoproto.goproto_getters)  = false;\n  option (gogoproto.goproto_stringer) = false;\n\n  string title       = 1;\n  string description = 2;\n  string name        = 3;\n  string owner       = 4;\n  bool   restricted  = 5;\n}\n"})}),"\n",(0,t.jsx)(s.p,{children:"This message is expected to fail if:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"The name already exists"}),"\n",(0,t.jsx)(s.li,{children:"Insuffient length of name"}),"\n",(0,t.jsx)(s.li,{children:"Excessive length of name"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"msgcreaterootnamerequest",children:"MsgCreateRootNameRequest"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"MsgCreateRootNameRequest"})," is a governance proposal that allows new root level names to be established after the genesis of the blockchain."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-proto",children:'message MsgCreateRootNameRequest {\n  option (cosmos.msg.v1.signer)    = "authority";\n\n  // The signing authority for the request\n  string authority   = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];\n  // NameRecord is a structure used to bind ownership of a name hierarchy to a collection of addresses\n  NameRecord record  = 2;\n}\n'})}),"\n",(0,t.jsx)(s.p,{children:"This message is expected to fail if:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"The name already exists"}),"\n",(0,t.jsx)(s.li,{children:"Insuffient length of name"}),"\n",(0,t.jsx)(s.li,{children:"Excessive length of name"}),"\n",(0,t.jsx)(s.li,{children:"The authority does not match the gov module."}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"If successful a name record will be created with the provided address and restriction."})]})}function h(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>i});var t=n(96540);const o={},r=t.createContext(o);function a(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);